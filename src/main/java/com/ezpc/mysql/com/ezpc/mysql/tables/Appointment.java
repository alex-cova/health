/*
 * This file is generated by jOOQ.
 */
package com.ezpc.mysql.tables;


import com.ezpc.mysql.Indexes;
import com.ezpc.mysql.Keys;
import com.ezpc.mysql.Spring;
import com.ezpc.mysql.tables.records.AppointmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Appointment extends TableImpl<AppointmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring.appointment</code>
     */
    public static final Appointment APPOINTMENT = new Appointment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppointmentRecord> getRecordType() {
        return AppointmentRecord.class;
    }

    /**
     * The column <code>spring.appointment.hospitalId</code>.
     */
    public final TableField<AppointmentRecord, Long> HOSPITALID = createField(DSL.name("hospitalId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>spring.appointment.uuid</code>.
     */
    public final TableField<AppointmentRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>spring.appointment.timestamp</code>.
     */
    public final TableField<AppointmentRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>spring.appointment.phoneNumber</code>.
     */
    public final TableField<AppointmentRecord, String> PHONENUMBER = createField(DSL.name("phoneNumber"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>spring.appointment.reason</code>.
     */
    public final TableField<AppointmentRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring.appointment.patientUuid</code>.
     */
    public final TableField<AppointmentRecord, String> PATIENTUUID = createField(DSL.name("patientUuid"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>spring.appointment.name</code>.
     */
    public final TableField<AppointmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>spring.appointment.doctorUuid</code>.
     */
    public final TableField<AppointmentRecord, String> DOCTORUUID = createField(DSL.name("doctorUuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>spring.appointment.status</code>.
     */
    public final TableField<AppointmentRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "");

    private Appointment(Name alias, Table<AppointmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Appointment(Name alias, Table<AppointmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring.appointment</code> table reference
     */
    public Appointment(String alias) {
        this(DSL.name(alias), APPOINTMENT);
    }

    /**
     * Create an aliased <code>spring.appointment</code> table reference
     */
    public Appointment(Name alias) {
        this(alias, APPOINTMENT);
    }

    /**
     * Create a <code>spring.appointment</code> table reference
     */
    public Appointment() {
        this(DSL.name("appointment"), null);
    }

    public <O extends Record> Appointment(Table<O> child, ForeignKey<O, AppointmentRecord> key) {
        super(child, key, APPOINTMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spring.SPRING;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.APPOINTMENT_APPOINTMENT_HOSPITALID_TIMESTAMP_INDEX);
    }

    @Override
    public UniqueKey<AppointmentRecord> getPrimaryKey() {
        return Keys.KEY_APPOINTMENT_PRIMARY;
    }

    @Override
    public Appointment as(String alias) {
        return new Appointment(DSL.name(alias), this);
    }

    @Override
    public Appointment as(Name alias) {
        return new Appointment(alias, this);
    }

    @Override
    public Appointment as(Table<?> alias) {
        return new Appointment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointment rename(String name) {
        return new Appointment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointment rename(Name name) {
        return new Appointment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointment rename(Table<?> name) {
        return new Appointment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, LocalDateTime, String, String, String, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
