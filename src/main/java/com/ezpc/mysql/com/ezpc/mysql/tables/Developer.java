/*
 * This file is generated by jOOQ.
 */
package com.ezpc.mysql.tables;


import com.ezpc.mysql.Keys;
import com.ezpc.mysql.Spring;
import com.ezpc.mysql.tables.records.DeveloperRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Developer extends TableImpl<DeveloperRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring.developer</code>
     */
    public static final Developer DEVELOPER = new Developer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeveloperRecord> getRecordType() {
        return DeveloperRecord.class;
    }

    /**
     * The column <code>spring.developer.uuid</code>.
     */
    public final TableField<DeveloperRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>spring.developer.name</code>.
     */
    public final TableField<DeveloperRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring.developer.age</code>.
     */
    public final TableField<DeveloperRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>spring.developer.gender</code>.
     */
    public final TableField<DeveloperRecord, Byte> GENDER = createField(DSL.name("gender"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>spring.developer.phoneNumber</code>.
     */
    public final TableField<DeveloperRecord, String> PHONENUMBER = createField(DSL.name("phoneNumber"), SQLDataType.VARCHAR(13), this, "");

    /**
     * The column <code>spring.developer.countryId</code>.
     */
    public final TableField<DeveloperRecord, Integer> COUNTRYID = createField(DSL.name("countryId"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>spring.developer.discordId</code>.
     */
    public final TableField<DeveloperRecord, String> DISCORDID = createField(DSL.name("discordId"), SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>spring.developer.proLang</code>.
     */
    public final TableField<DeveloperRecord, JSON> PROLANG = createField(DSL.name("proLang"), SQLDataType.JSON, this, "");

    private Developer(Name alias, Table<DeveloperRecord> aliased) {
        this(alias, aliased, null);
    }

    private Developer(Name alias, Table<DeveloperRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring.developer</code> table reference
     */
    public Developer(String alias) {
        this(DSL.name(alias), DEVELOPER);
    }

    /**
     * Create an aliased <code>spring.developer</code> table reference
     */
    public Developer(Name alias) {
        this(alias, DEVELOPER);
    }

    /**
     * Create a <code>spring.developer</code> table reference
     */
    public Developer() {
        this(DSL.name("developer"), null);
    }

    public <O extends Record> Developer(Table<O> child, ForeignKey<O, DeveloperRecord> key) {
        super(child, key, DEVELOPER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spring.SPRING;
    }

    @Override
    public UniqueKey<DeveloperRecord> getPrimaryKey() {
        return Keys.KEY_DEVELOPER_PRIMARY;
    }

    @Override
    public Developer as(String alias) {
        return new Developer(DSL.name(alias), this);
    }

    @Override
    public Developer as(Name alias) {
        return new Developer(alias, this);
    }

    @Override
    public Developer as(Table<?> alias) {
        return new Developer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(String name) {
        return new Developer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(Name name) {
        return new Developer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(Table<?> name) {
        return new Developer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, Integer, Byte, String, Integer, String, JSON> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super Integer, ? super Byte, ? super String, ? super Integer, ? super String, ? super JSON, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super Integer, ? super Byte, ? super String, ? super Integer, ? super String, ? super JSON, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
