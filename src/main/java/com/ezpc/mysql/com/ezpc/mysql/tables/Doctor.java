/*
 * This file is generated by jOOQ.
 */
package com.ezpc.mysql.tables;


import com.ezpc.mysql.Keys;
import com.ezpc.mysql.Spring;
import com.ezpc.mysql.tables.records.DoctorRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doctor extends TableImpl<DoctorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring.doctor</code>
     */
    public static final Doctor DOCTOR = new Doctor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorRecord> getRecordType() {
        return DoctorRecord.class;
    }

    /**
     * The column <code>spring.doctor.uuid</code>.
     */
    public final TableField<DoctorRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.license</code>.
     */
    public final TableField<DoctorRecord, String> LICENSE = createField(DSL.name("license"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.name</code>.
     */
    public final TableField<DoctorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.university</code>.
     */
    public final TableField<DoctorRecord, String> UNIVERSITY = createField(DSL.name("university"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.phoneNumber</code>.
     */
    public final TableField<DoctorRecord, String> PHONENUMBER = createField(DSL.name("phoneNumber"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>spring.doctor.email</code>.
     */
    public final TableField<DoctorRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>spring.doctor.user</code>.
     */
    public final TableField<DoctorRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.secret</code>.
     */
    public final TableField<DoctorRecord, String> SECRET = createField(DSL.name("secret"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.address</code>.
     */
    public final TableField<DoctorRecord, JSON> ADDRESS = createField(DSL.name("address"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>spring.doctor.country</code>.
     */
    public final TableField<DoctorRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.specialityLicense</code>.
     */
    public final TableField<DoctorRecord, String> SPECIALITYLICENSE = createField(DSL.name("specialityLicense"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>spring.doctor.specialityUniversity</code>.
     */
    public final TableField<DoctorRecord, String> SPECIALITYUNIVERSITY = createField(DSL.name("specialityUniversity"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring.doctor.schedule</code>.
     */
    public final TableField<DoctorRecord, JSON> SCHEDULE = createField(DSL.name("schedule"), SQLDataType.JSON, this, "");

    /**
     * The column <code>spring.doctor.prefix</code>.
     */
    public final TableField<DoctorRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>spring.doctor.status</code>.
     */
    public final TableField<DoctorRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>spring.doctor.title</code>.
     */
    public final TableField<DoctorRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>spring.doctor.specialityTitle</code>.
     */
    public final TableField<DoctorRecord, String> SPECIALITYTITLE = createField(DSL.name("specialityTitle"), SQLDataType.VARCHAR(45), this, "");

    private Doctor(Name alias, Table<DoctorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Doctor(Name alias, Table<DoctorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring.doctor</code> table reference
     */
    public Doctor(String alias) {
        this(DSL.name(alias), DOCTOR);
    }

    /**
     * Create an aliased <code>spring.doctor</code> table reference
     */
    public Doctor(Name alias) {
        this(alias, DOCTOR);
    }

    /**
     * Create a <code>spring.doctor</code> table reference
     */
    public Doctor() {
        this(DSL.name("doctor"), null);
    }

    public <O extends Record> Doctor(Table<O> child, ForeignKey<O, DoctorRecord> key) {
        super(child, key, DOCTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spring.SPRING;
    }

    @Override
    public UniqueKey<DoctorRecord> getPrimaryKey() {
        return Keys.KEY_DOCTOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<DoctorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DOCTOR_UNIQUE_USER_INDEX);
    }

    @Override
    public Doctor as(String alias) {
        return new Doctor(DSL.name(alias), this);
    }

    @Override
    public Doctor as(Name alias) {
        return new Doctor(alias, this);
    }

    @Override
    public Doctor as(Table<?> alias) {
        return new Doctor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(String name) {
        return new Doctor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(Name name) {
        return new Doctor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(Table<?> name) {
        return new Doctor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, String, String, String, String, String, String, JSON, String, String, String, JSON, String, Integer, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super JSON, ? super String, ? super String, ? super String, ? super JSON, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super JSON, ? super String, ? super String, ? super String, ? super JSON, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
