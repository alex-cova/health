/*
 * This file is generated by jOOQ.
 */
package com.ezpc.mysql.tables;


import com.ezpc.mysql.Keys;
import com.ezpc.mysql.Spring;
import com.ezpc.mysql.tables.records.DrugRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Drug extends TableImpl<DrugRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring.drug</code>
     */
    public static final Drug DRUG = new Drug();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DrugRecord> getRecordType() {
        return DrugRecord.class;
    }

    /**
     * The column <code>spring.drug.id</code>.
     */
    public final TableField<DrugRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>spring.drug.name</code>.
     */
    public final TableField<DrugRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring.drug.type</code>.
     */
    public final TableField<DrugRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>spring.drug.aliases</code>.
     */
    public final TableField<DrugRecord, String> ALIASES = createField(DSL.name("aliases"), SQLDataType.VARCHAR(255), this, "");

    private Drug(Name alias, Table<DrugRecord> aliased) {
        this(alias, aliased, null);
    }

    private Drug(Name alias, Table<DrugRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring.drug</code> table reference
     */
    public Drug(String alias) {
        this(DSL.name(alias), DRUG);
    }

    /**
     * Create an aliased <code>spring.drug</code> table reference
     */
    public Drug(Name alias) {
        this(alias, DRUG);
    }

    /**
     * Create a <code>spring.drug</code> table reference
     */
    public Drug() {
        this(DSL.name("drug"), null);
    }

    public <O extends Record> Drug(Table<O> child, ForeignKey<O, DrugRecord> key) {
        super(child, key, DRUG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spring.SPRING;
    }

    @Override
    public UniqueKey<DrugRecord> getPrimaryKey() {
        return Keys.KEY_DRUG_PRIMARY;
    }

    @Override
    public Drug as(String alias) {
        return new Drug(DSL.name(alias), this);
    }

    @Override
    public Drug as(Name alias) {
        return new Drug(alias, this);
    }

    @Override
    public Drug as(Table<?> alias) {
        return new Drug(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Drug rename(String name) {
        return new Drug(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Drug rename(Name name) {
        return new Drug(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Drug rename(Table<?> name) {
        return new Drug(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
