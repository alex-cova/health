/*
 * This file is generated by jOOQ.
 */
package com.ezpc.mysql.tables;


import com.ezpc.mysql.Keys;
import com.ezpc.mysql.Spring;
import com.ezpc.mysql.tables.records.HospitalRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hospital extends TableImpl<HospitalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring.hospital</code>
     */
    public static final Hospital HOSPITAL = new Hospital();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HospitalRecord> getRecordType() {
        return HospitalRecord.class;
    }

    /**
     * The column <code>spring.hospital.id</code>.
     */
    public final TableField<HospitalRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spring.hospital.name</code>.
     */
    public final TableField<HospitalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>spring.hospital.address</code>.
     */
    public final TableField<HospitalRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>spring.hospital.country</code>.
     */
    public final TableField<HospitalRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    private Hospital(Name alias, Table<HospitalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hospital(Name alias, Table<HospitalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring.hospital</code> table reference
     */
    public Hospital(String alias) {
        this(DSL.name(alias), HOSPITAL);
    }

    /**
     * Create an aliased <code>spring.hospital</code> table reference
     */
    public Hospital(Name alias) {
        this(alias, HOSPITAL);
    }

    /**
     * Create a <code>spring.hospital</code> table reference
     */
    public Hospital() {
        this(DSL.name("hospital"), null);
    }

    public <O extends Record> Hospital(Table<O> child, ForeignKey<O, HospitalRecord> key) {
        super(child, key, HOSPITAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spring.SPRING;
    }

    @Override
    public Identity<HospitalRecord, Long> getIdentity() {
        return (Identity<HospitalRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HospitalRecord> getPrimaryKey() {
        return Keys.KEY_HOSPITAL_PRIMARY;
    }

    @Override
    public Hospital as(String alias) {
        return new Hospital(DSL.name(alias), this);
    }

    @Override
    public Hospital as(Name alias) {
        return new Hospital(alias, this);
    }

    @Override
    public Hospital as(Table<?> alias) {
        return new Hospital(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hospital rename(String name) {
        return new Hospital(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hospital rename(Name name) {
        return new Hospital(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hospital rename(Table<?> name) {
        return new Hospital(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
