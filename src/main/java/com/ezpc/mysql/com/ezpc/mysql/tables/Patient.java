/*
 * This file is generated by jOOQ.
 */
package com.ezpc.mysql.tables;


import com.ezpc.mysql.Keys;
import com.ezpc.mysql.Spring;
import com.ezpc.mysql.tables.records.PatientRecord;

import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>spring.patient.hospitalId</code>.
     */
    public final TableField<PatientRecord, Long> HOSPITALID = createField(DSL.name("hospitalId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>spring.patient.uuid</code>.
     */
    public final TableField<PatientRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>spring.patient.name</code>.
     */
    public final TableField<PatientRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>spring.patient.sex</code>.
     */
    public final TableField<PatientRecord, Byte> SEX = createField(DSL.name("sex"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>spring.patient.address</code>.
     */
    public final TableField<PatientRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>spring.patient.phoneNumber</code>.
     */
    public final TableField<PatientRecord, String> PHONENUMBER = createField(DSL.name("phoneNumber"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>spring.patient.email</code>.
     */
    public final TableField<PatientRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>spring.patient.country</code>.
     */
    public final TableField<PatientRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>spring.patient.birthdate</code>.
     */
    public final TableField<PatientRecord, LocalDate> BIRTHDATE = createField(DSL.name("birthdate"), SQLDataType.LOCALDATE, this, "");

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>spring.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    /**
     * Create a <code>spring.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    public <O extends Record> Patient(Table<O> child, ForeignKey<O, PatientRecord> key) {
        super(child, key, PATIENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spring.SPRING;
    }

    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.KEY_PATIENT_PRIMARY;
    }

    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    @Override
    public Patient as(Table<?> alias) {
        return new Patient(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Table<?> name) {
        return new Patient(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Byte, String, String, String, String, LocalDate> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super Byte, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super Byte, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
